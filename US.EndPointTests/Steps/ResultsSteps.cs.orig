using System;
using System.Threading.Tasks;
using TechTalk.SpecFlow;
using RestSharp;
using Roche.Rmdd.HivMonitor.Reporting.Stores;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Roche.Rmdd.HivMonitor.ResultRegister.DTO;
using US.EndPointTests.AdditionalFunctionalities;

namespace US.EndPointTests.Steps
{
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Collections.Generic;
	using System.Text.RegularExpressions;

	[Binding]
    public class ResultsSteps : StepsBase
    {
        private class DataForAppToken
        {
            public string clientId;
            public string clientSecret;
            public string[] scopes;
        }

        TokenStore tokenStore;
        public string microservice = "results";
        public string appToken = "NotGenerated";
        private Dictionary<string, DataForAppToken> data = new Dictionary<string, DataForAppToken>
            {
                { "ExportClient", new DataForAppToken {
                    clientId = "ExportClient",
                    clientSecret = "nKa5$a59ByXHLLBS",
                    scopes = new[] { "exportdata" }
                } },
                { "ReportingApi", new DataForAppToken{
                    clientId= "ReportingApi",
                    clientSecret = "J@mp.9J[hT.FMYxT",
                    scopes = new[] { "scim_read", "testresult_read", "barcode_read" }
                } }
            };

        [Given(@"App token is generated for '(.*)' client")]
        public async Task GivenAppTokenIsGenerated(string clientId)
        {
            appToken = await generateAppToken(data[clientId]);
        }


        async Task<string> generateAppToken(DataForAppToken dataForAppToken)
        {
            tokenStore = new TokenStore(dataForAppToken.clientId, dataForAppToken.clientSecret, "https://umastaging.projectschweitzer.net");

            var token = await tokenStore.GetToken(dataForAppToken.scopes).ConfigureAwait(false);

            return token.AccessToken;
        }


		#region .: Playground Controller :.

		//playground/results
		[When(@"request to get all results")]
        public void WhenRequestToGetTheAllResults()
        {
            var client = new RestClient($"{protocol}{site}-{microservice}{server}/playground/results");
            request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", $"Bearer {_tokenResponse.AccessToken}");
            request.AddHeader("cache-control", "no-cache");

            response = client.Execute(request);
        }


		//playground/results/{barcode}
		[Given(@"request to get result from barcode '(.*)'")]
		[When(@"request to get result from barcode '(.*)'")]
        public void WhenRequestGetResultConcreteBarcode(string barcode_id)
        {
            var client = new RestClient($"{protocol}{site}-{microservice}{server}/playground/results/{barcode_id}");
            request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", $"Bearer {_tokenResponse.AccessToken}");
            request.AddHeader("cache-control", "no-cache");
            request.AddHeader("Content-Type", "application/json");

            response = client.Execute(request);
        }


		//playground/results/release
		[When(@"request to release results for barcode '(.*)'")]
		public void WhenRequestToReleaseResultsForBarcode(string expected_barcode)
		{
			var client = new RestClient($"{protocol}{site}-{microservice}{server}/playground/results/release");
			request = new RestRequest(Method.POST);
			request.AddHeader("Authorization", $"Bearer {_tokenResponse.AccessToken}");
			request.AddHeader("cache-control", "no-cache");
			request.AddHeader("Content-Type", "application/json");
			request.AddParameter("undefined", $"[ \"{expected_barcode}\"]", ParameterType.RequestBody);

			response = client.Execute(request);
		}


		//playground/results/unrelease/{barcode}
		[When(@"request to unrelease results for barcode '(.*)'")]
		public void WhenRequestToUnreleaseResultsForBarcode(string expected_barcode)
		{
			var client = new RestClient($"{protocol}{site}-{microservice}{server}/playground/results/unrelease/{expected_barcode}");
			request = new RestRequest(Method.POST);
			request.AddHeader("Authorization", $"Bearer {_tokenResponse.AccessToken}");
			request.AddHeader("cache-control", "no-cache");
			request.AddHeader("Content-Type", "application/json");
			response = client.Execute(request);
		}


		//playground/results
		[Given(@"request to get results for barcode '(.*)'")]
		public void GivenRequestToGetResultsForBarcode(string expected_barcode)
		{
			var client = new RestClient($"{protocol}{site}-{microservice}{server}/results");
			request = new RestRequest(Method.POST);
			request.AddHeader("Authorization", $"Bearer {_tokenResponse.AccessToken}");
			request.AddHeader("cache-control", "no-cache");
			request.AddHeader("Content-Type", "application/json");
			request.AddParameter("undefined", $"[ \"{expected_barcode}\"]", ParameterType.RequestBody);

			response = client.Execute(request);
		}

		//playground/results/changebarcode
		[When(@"request to change barcode '(.*)' to barcode '(.*)'")]
		public void GivenRequestToGetChangeBarcode(string oldBarcode, string newBarcode)
		{
			var client = new RestClient($"{protocol}{site}-{microservice}{server}/playground/results/changebarcode");
			request = new RestRequest(Method.POST);
			request.AddHeader("Authorization", $"Bearer {_tokenResponse.AccessToken}");
			request.AddHeader("cache-control", "no-cache");
			request.AddHeader("Content-Type", "application/json");
			request.AddParameter("undefined", "{\n  \"oldBarcode\": \""+oldBarcode+"\",\n  \"newBarcode\": \""+newBarcode+"\"\n}\n", ParameterType.RequestBody);

			response = client.Execute(request);
		}

		#endregion





		[Then(@"the results are retrieved")]
		public void ThenTheResultsAreRetrieved()
		{
			var dynJson = JsonConvert.DeserializeObject<JObject[]>(response.Content);

			int lenght = dynJson.Length;
			bool isNotEmpty = dynJson.Length != 0 ? true : false;
			Assert.IsTrue(isNotEmpty, $"Response content is empty: {response.Content}");
		}

		[Then(@"the response contains result for barcode '(.*)'")]
        public void ThenTheResponseContainsResult(string barcode_id)
        {
            var dynJson = JsonConvert.DeserializeObject<JObject[]>(response.Content);

            bool isNotEmpty = dynJson.Length != 0 ? true : false;
            Assert.IsTrue(isNotEmpty, $"Response content is empty: {response.Content}");
			bool isSameBarcodeID = dynJson[0]["barcode"].ToString().Equals(barcode_id) ? true : false;
            Assert.IsTrue(isSameBarcodeID, $"Response does not contain a result with expected barcode: {dynJson[0]["barcode"]}"+
								" \n -Response Content: " + response.Content);
        }

        [Then(@"response contains the result '(.*)'")]
        public void ThenResponseContainsResult(string expected_result)
        {
            bool IsBarcodeShown = response.Content.Contains(expected_result);
            Assert.IsTrue(IsBarcodeShown, $"Response content does not contain expected result: {expected_result}"+
				" \n -Response Content: "+ response.Content);
        }

		[Then(@"response contains already released '(.*)' for barcode '(.*)'")]
		public void ThenResponseContainsTheResultForBarcode(string expected_result, string barcode)
		{
			bool IsBarcodeShown = response.Content.Contains(expected_result) && response.Content.Contains(barcode);
			Assert.IsTrue(IsBarcodeShown, $"Response content does not contain expected result / barcode: {expected_result}" +
				" | "+barcode+ " \n -Response Content: " + response.Content);
		}

        [When(@"request to get results for barcode '(.*)'")]

		//REGISTER CONTROLLER
        [When(@"request to register default result with barcode '(.*)'")]
        public void WhenRequestToRegisterDefaultResult(string expected_barcode)
        {
            DateTime dateTime_base = new DateTime(2018, 10, 10, 15, 20, 0);
            ViralLoadInfoDTO default_result = new ViralLoadInfoDTO()
            {
                Barcode = expected_barcode,
                DeviceId = "400299",
                DeviceType = "CAPCTM",
                Flags = new[] { "TM40-2", "TM42-2" },
                IcValue = 0,
                Id = "Z25VEGJN-ZWZ9-R5F6-MJFB-ZJAWCU57V01I",
                Interpretation = "Not Detected DBS",
                LabName = "Unknown",
                ResultReleased = dateTime_base,
                SampleLoaded = dateTime_base.AddMinutes(15),
                SamplePrepEnd = dateTime_base.AddMinutes(30),
                SamplePrepStart = dateTime_base.AddMinutes(45),
                SampleProcessingEnd = dateTime_base.AddMinutes(60),
                SampleProcessingStart = dateTime_base.AddMinutes(75),
                Test = "TID.HI2QLD96",
                Unit = "0",
                Value = 1127,
                Released = false
            };

            var client = new RestClient($"{protocol}{site}-{microservice}{server}/results");
            request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", $"Bearer {appToken}");
            request.AddHeader("cache-control", "no-cache");
            request.AddHeader("Content-Type", "application/json");
            request.AddJsonBody(default_result);

            response = client.Execute(request);

        }
        [Given(@"request to register result with value '(.*)' for barcode '(.*)'")]
        [When(@"request to register result with value '(.*)' for barcode '(.*)'")]
        public void WhenRequestToRegisterResultWithValueForBarcode(int expected_value, string expected_barcode)
        {
            /*DB_queries a = new DB_queries();
            a.AddResult(expected_barcode, expected_value.ToString());
            */
            ViralLoadInfoDTO default_result = new ViralLoadInfoDTO()
            {
                Barcode = expected_barcode,
                DeviceId = "400299",
                DeviceType = "CAPCTM",
                Flags = new[] { "TM40-2", "TM42-2" },
                IcValue = 0,
                Id = "Z25VEGJN-ZWZ9-R5F6-MJFB-ZJAWCU57V01I",
                Interpretation = "Not Detected DBS",
                LabName = "Unknown",
                ResultReleased = DateTime.UtcNow,
                SampleLoaded = DateTime.UtcNow,
                SamplePrepEnd = DateTime.UtcNow,
                SamplePrepStart = DateTime.UtcNow,
                SampleProcessingEnd = DateTime.UtcNow,
                SampleProcessingStart = DateTime.UtcNow,
                Test = "TID.HI2QLD96",
                Unit = "0",
                Value = expected_value,
                Released = false
            };

            var client = new RestClient($"{protocol}{site}-{microservice}{server}/register");
            request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", $"Bearer {appToken}");
            request.AddHeader("cache-control", "no-cache");
            request.AddHeader("Content-Type", "application/json");
            request.AddJsonBody(default_result);

            response = client.Execute(request);
        }

		[Then(@"the response contains a list of all results")]
		public void TheRequestContainsListOfAllResults()
		{
			DB_queries a = new DB_queries();
			Assert.IsTrue(Regex.Matches(response.Content.ToString(), "barcode").Count == a.GetResultsCountInDB(),
				" - Expected results: "+ a.GetResultsCountInDB()+"\n - Response results: "+ Regex.Matches(response.Content.ToString(), "barcode").Count);
		}

	}
}
